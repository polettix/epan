#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use Pod::Usage qw( pod2usage );
use Getopt::Long qw( :config gnu_getopt );
use English qw( -no_match_vars );
my $VERSION = '0.0.1';
use 5.012;

# Integrated logging facility
use Log::Log4perl::Tiny qw( :easy :no_extra_logdie_message );
Log::Log4perl->easy_init({level => $INFO, layout => '[%d %-5p] %m%n'});

use FindBin qw< $Bin >;
use lib "$Bin/../lib";
use App::EPAN;

App::EPAN->run(@ARGV);

__END__

=head1 NAME

epan - regenerated index of a [Mini-]CPAN tree

=head1 VERSION

Ask the version number to the script itself, calling:

   shell$ epan --version


=head1 USAGE

   epan [--usage] [--help] [--man] [--version]

   epan create [-t|--target dirname] Module1 [Module2...]

   epan update [-t|--target dirname] Module1 [Module2...]

   epan index [-o|--output filename] [directory]


=head1 EXAMPLES

   # collects all what's needed to install Dancer somewhere
   shell$ epan create -t dancer-stuff Dancer

   # regenerated index in ./modules/02packages.details.txt.gz, assuming
   # to be in root directory of CPAN tree
   shell$ epan index

   # prints index on standard output, works on /path/to/minicpan
   shell$ epan index -o - /path/to/minicpan


=head1 DESCRIPTION

This program helps you creating and managing an EPAN - a version of the
CPAN that is trimmed down to your needs for installing specific stuff.

To start with an example, suppose you have to install Dancer and a couple
of its plugins in a machine that - for good reasons - is not connected
to the Internet. It's easy to get the distribution files for Dancer and
the plugins... but what about the dependencies? It can easily become a
nightmare, forcing you to go back and forth with new modules as soon as
you discover the need to install them.

Thanks to L<cpanm>, this is quite easier these days: it can actually do
what's needed with a single command:

   # on the machine connected to the Internet or to a minicpan
   $ cpanm -L xxx --scandeps --save-dists dists \
        Dancer Dancer::Plugin::FlashNote ...

which places all the modules in subdirectory C<dists> (thanks to option
C<--save-dists>) with an arrangement similar to what you would expect from
a CPAN mirror.

On the target machine, you still have to make some work - e.g. you should
collect the output from the invocation of cpanm above to figure out the
order to use for installing the distribution files. Additionally, the
directory structure that is generated lacks a proper index file (located
in F<modules/02package.details.txt.gz>) so it would be difficult to use
the normal toolchain.


L<epan> aims at
filling up the last mile to get the job done, providing you with a
subdirectory that is ready for deployment, with all the bits in place to
push automation as much as possible. So you can do this:

   # on the machine connected to the Internet or to a minicpan
   $ epan create Dancer Dancer::Plugin::FlashNote ...
   $ tar cvzf epan.tar.gz epan

transfer C<dists.tar.gz> to the target machine and...

   # on the target machine
   $ tar xvzf epan.tar.gz
   $ cd epan
   $ ./install.sh

optionally providing an installation target directory:

   $ ./install.sh /path/to/local/perl

=head2 C<index>

This program regenerates the index in a tree that is (mostly) compliant
with how CPAN is organized (which is what most tools expect). In particular,
it regenerates the file F<modules/02package.details.txt.gz>, used by these
tools to see where to get the files related to a module.

This can be useful when you have a starting base - compound of modules
coming from CPAN and your own distribution - already arranged in the
right shape, but you need to generate an index. For example, this happens
when you collect some distribution files using L<cpanminus>:

   shell$ cpanminus -L xxx --save-dists dists Mod1 Mod2...

because it saves the needed distributions in C<dists> but it does not
generate the index. So, if you want to prepare a pack of modules to carry
with your application, you can do like this:

   $ figure_out_modules > modlist
   $ cpanm -L xxx --save-dists dists $(<modlist)
   $ epan index dists
   $ tar cvf dists.tar dists

then carry dists.tar with you, at which point you can:

   $ cpanm --mirror file://$YOURPATH --mirror-only Mod1 Mod2 ...

=head1 OPTIONS

You can simply call the program, which means the following:

=over

=item *

the current working directory (see L<Cwd>) is the root of your CPAN-like
tree

=item *

the F<02packages.details.txt.gz> file will be saved into
F<modules/02packages.details.txt.gz> under the current directory.

=back

If you want, you can provide the path to the root of your CPAN-like tree
as a straight command-line option:

   $ epan /path/to/your/cpan

Apart from this, the following options are supported:

=over

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item --man

print out the full documentation for the script.

=item --output | -o filename

specify where to send the output index. If you set C<->, then it will be
sent to standard output. Otherwise, the provided C<filename> will be
considered - well - a filename; depending on how it ends (i.e. with
C<.gz> or not) it will be saved as a gzipped file or as plaintext.

By default it is set to F<modules/02packages.details.txt.gz> under
the directory specified as the root of your CPAN-like tree.

=item --usage

print a concise usage line and exit.

=item --version

print the version of the script.

=back

=head1 CONFIGURATION AND ENVIRONMENT

epan requires no configuration files or environment variables.


=head1 DEPENDENCIES

Runs on perl 5.012, adapt it if you want to run on something older :-)

The following non-core modules are used:

=over

=item *

B<< Dist::Metadata >>

=item *

B<< Path::Class >>

=item *

B<< File::Find::Rule >>

=item *

B<< Log::Log4perl::Tiny >>

=back

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests through http://rt.cpan.org/


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENCE AND COPYRIGHT

Copyright (C) 2011-2014 by Flavio Poletti C<polettix@cpan.org>.

This script is free software; you can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
